default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
APPLE_KEY_CONTENT = ENV["APPLE_KEY_CONTENT"]
GITHUB_API_TOKEN = ENV["GITHUB_API_TOKEN"]
SLACK_CHANNEL = ENV["SLACK_CHANNEL"] 
APP_NAME = "CDProject"
SCHEME = "CDProject"
GITHUB_TOKEN = ENV["GITHUB_TOKEN"]

# Methods

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

def broadcast_message()
  version = get_info_plist_value(
    path: "#{APP_NAME}/Info.plist",
    key: "CFBundleShortVersionString"
  )
  
  build = get_info_plist_value(
    path: "#{APP_NAME}/Info.plist",
    key: "CFBundleVersion"
  )

  slack(
    message: "Hi! A new iOS build has been submitted to TestFlight",
    payload: {
      "Build Date" => Time.new.to_s,
      "Release Version" => version+"."+build
    },
    slack_url: SLACK_CHANNEL,
    use_webhook_configured_username_and_icon: true,
    fail_on_error: false,
    success: true
  ) 
end

def on_error(exception)
  slack(
    message: exception.to_s,
    slack_url: SLACK_CHANNEL,
    success: false,
    payload: { "Output" => exception.to_s }
  )
end 

platform :ios do
  lane :closed_beta do |lane|

      begin 
        if !lane[:bump]
          raise Exception.new "No bump type defined! Use one of: patch | minor | major".red
        end
      rescue Exception => e  
        puts e.message  
        exit!
      end  

      begin
          
      # get the last commit comments from Git history
      # and creates our changelog
      comments = changelog_from_git_commits(
        between: ["origin/main", "HEAD"],
        pretty: "- %s",
        date_format: "short",
        match_lightweight_tag: false, 
        merge_commit_filtering: "exclude_merges" 
      ) || []

      # calculates the new version according to
      # the semantic version added
      type = lane[:bump]

      old = last_git_tag || "0.0.1"

      version = old

      old[0] = ''
      oldArr = old.split('.').map{|v| v.to_i}    

      if type == "patch"
          version = "#{oldArr[0]}.#{oldArr[1]}.#{oldArr[2] + 1}"
      elsif type == "minor"
          version = "#{oldArr[0]}.#{oldArr[1] + 1}.0"
      elsif type == "major"
          version = "#{oldArr[0] + 1}.0.0"
      end   
      
      if version == old
          UI.user_error!("Wrong release type parameter. Enter: patch | minor | major")
      end

      puts "Llego increment_version_number"

      # set the new version number
      increment_version_number(
          version_number: version
      )

      puts "PASO de increment_version_number"

      # increment build number
      increment_build_number(xcodeproj: "#{APP_NAME}.xcodeproj")

      # Temporay keychain creation
      ensure_temp_keychain(TEMP_KEYCHAIN_USER, TEMP_KEYCHAIN_PASSWORD)

      # Connect to App Store Connect
      api_key = app_store_connect_api_key(
        key_id: APPLE_KEY_ID,
        issuer_id: APPLE_ISSUER_ID,
        key_content: APPLE_KEY_CONTENT,            
        duration: 1200,            
        in_house: false
      )

      # Signin step
      match(
        type: 'appstore',
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        git_basic_authorization: Base64.strict_encode64(GITHUB_API_TOKEN),
        readonly: true,
        keychain_name: TEMP_KEYCHAIN_USER,
        keychain_password: TEMP_KEYCHAIN_PASSWORD,
        api_key: api_key
      )

      #Â Make IPA
      gym(
        configuration: "Release",
        scheme: SCHEME,
        export_method: "app-store",
        export_options: {
          provisioningProfiles: { 
              DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
          }
        }
      )


      puts "Llego new_git_release #{version} \n #{comments} \n #{type}"

      # Publish tag and release on Github
      # creates a bump version commit 
      commit_version_bump(
        message: "Version bumped to v#{version}"
      )

      # push bump commit
      push_to_git_remote(
          tags: false
      )

      # create a local tag with the new version
      add_git_tag(
          message: comments,
          tag: "v#{version}",
          prefix: "v",
          build_number: version
      )    

      # publish a new release into Github
      github_release = set_github_release(
          api_token: GITHUB_TOKEN,
          repository_name: "litoarias/CDProject",
          name: "#{type.capitalize} version v#{version}",
          tag_name: "v#{version}",
          description: comments,
          commitish: "main"
      )


      puts "PASO new_git_release"

      # Transport and deploy to testflight
      pilot(
        apple_id: "#{DEVELOPER_APP_ID}",
        app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
        skip_waiting_for_build_processing: true,
        skip_submission: true,
        distribute_external: false,
        notify_external_testers: false,
        ipa: "./#{APP_NAME}.ipa"
      )

      broadcast_message
      
      delete_temp_keychain(TEMP_KEYCHAIN_USER)
   
    rescue => exception
      puts exception.to_s
      on_error(exception)
    end

  end

end